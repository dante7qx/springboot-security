server:
  port: 8003
  servlet:
    context-path: /client
spring:
  thymeleaf:
    cache: false
#  security:
#    oauth2:
#      client:
#        registration:                    # ClientRegistration 已在授权服务器注册的客户端
#          github:                        # 不支持 OIDC 登录协议, 仅支持标准的 OAuth 2.0 授权码流程
#            client-name: "Github 登录"
#            client-id: 2a072c55d48f194676f7
#            client-secret: c816673448d997ca8adda06418c689ac8fe513cb
#            scope: public_repo, read:user, user:email
#            redirect-uri: "https://4fe1382d.r21.cpolar.top/client/login/oauth2/code/{registrationId}"    # 通过内网穿透生成测试公网地址
#        provider:
#          github:
#            authorization-uri: https://github.com/login/oauth/authorize
#            token-uri: https://github.com/login/oauth/access_token
#            user-info-uri: https://api.github.com/user
#            user-name-attribute: login

# 对于 provider
# 1. 只配置 issuer-uri, 客户端启动时会自动探测 ${issuer-uri}/.well-known/openid-configuration。AS 未启动，Client 启动也会报错
# 2. 配置 authorization-uri、token-uri、jwk-set-uri、user-info-uri，AS 未启动，Client 启动不受影响
# 3. 纯 OAuth2，则不要设置 issuer-uri 和 user-info-uri

spirit:
  auth-server-url: http://localhost:8001
  resource-server-url: http://localhost:8002
  client-id: secret-basic-client
  client-secret: secret-basic-secret
  client-name: "Spirit 客户端"
  authorization-grant-type: authorization_code # authorization_code, client_credentials, password, urn:ietf:params:oauth:grant-type:jwt-bearer
  client-authentication-method: client_secret_basic # client_secret_basic, client_secret_post, private_key_jwt, client_secret_jwt and none
  redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
  scope: openid,email,api.book.read,api.book.write
  enable-issuer: false

logging:
  level:
    org.springframework.web: debug
    org.springframework.security: trace
    org.springframework.security.oauth2.client: trace
    org.springframework.web.client.RestTemplate: trace
    org.springframework.web.reactive.function.client.WebClient: trace