server:
  port: 8003
  servlet:
    context-path: /client
spring:
  thymeleaf:
    cache: false
  security:
    oauth2:
      client:
        registration:                    # ClientRegistration 已在授权服务器注册的客户端
          secret-basic-client:           # 自定义客户端名称（可随意命名）, 自动注入为一个 ClientRegistration Bean
            client-id: secret-basic-client
            client-secret: secret-basic-secret
            client-name: "Spirit 客户端"
            authorization-grant-type: authorization_code # authorization_code, client_credentials, password, urn:ietf:params:oauth:grant-type:jwt-bearer
            scope: api.book.read,api.book.write
            client-authentication-method: client_secret_basic # client_secret_basic, client_secret_post, private_key_jwt, client_secret_jwt and none
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            provider: spirit-provider     # 关联的授权服务器配置
          github:                         # Github 登录
            client-id: 2a072c55d48f194676f7
            client-secret: c816673448d997ca8adda06418c689ac8fe513cb
            scope: public_repo
            redirect-uri: "https://25f7692e.r21.cpolar.top/client/login/oauth2/code/{registrationId}"    # 通过内网穿透生成测试公网地址
        provider:                                                           # 对于内置支持的 provider（如 GitHub、Google），不需要 provider 节点。对 Gitee、微信等则需提供 provider 信息
          spirit-provider:
            authorization-uri: ${spirit.auth-server-url}/oauth2/authorize   # 授权服务器的授权 Endpoint
            token-uri: ${spirit.auth-server-url}/oauth2/token               # 授权服务器的令牌 Endpoint
            jwk-set-uri: ${spirit.auth-server-url}/oauth2/jwks             # 公钥地址
            # 无 issuer-uri 和 user-info-uri（只使用 OAuth2，无 OIDC）

spirit:
  auth-server-url: http://localhost:8001
  resource-server-url: http://localhost:8002

logging:
  level:
    org.springframework.web: info
    org.springframework.security: info
    org.springframework.security.oauth2: debug